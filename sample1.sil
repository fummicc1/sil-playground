sil_stage canonical

import Builtin
import Swift
import SwiftShims

struct Number {
  @_hasStorage @_hasInitialValue var value: Int { get set }
  init()
  init(value: Int = 0)
}

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

// variable initialization expression of Number.value
sil hidden [transparent] @$s7sample16NumberV5valueSivpfi : $@convention(thin) () -> Int {
bb0:
  %0 = integer_literal $Builtin.Int64, 0          // user: %1
  %1 = struct $Int (%0 : $Builtin.Int64)          // user: %2
  return %1 : $Int                                // id: %2
} // end sil function '$s7sample16NumberV5valueSivpfi'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

// Number.value.getter
sil hidden [transparent] @$s7sample16NumberV5valueSivg : $@convention(method) (Number) -> Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $Number):
  debug_value %0 : $Number, let, name "self", argno 1, implicit // id: %1
  %2 = struct_extract %0 : $Number, #Number.value // user: %3
  return %2 : $Int                                // id: %3
} // end sil function '$s7sample16NumberV5valueSivg'

// Number.value.setter
sil hidden [transparent] @$s7sample16NumberV5valueSivs : $@convention(method) (Int, @inout Number) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Int, %1 : $*Number):
  debug_value %0 : $Int, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $*Number, var, name "self", argno 2, implicit, expr op_deref // id: %3
  %4 = begin_access [modify] [static] %1 : $*Number // users: %7, %5
  %5 = struct_element_addr %4 : $*Number, #Number.value // user: %6
  store %0 to %5 : $*Int                          // id: %6
  end_access %4 : $*Number                        // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s7sample16NumberV5valueSivs'

// Number.value.modify
sil hidden [transparent] @$s7sample16NumberV5valueSivM : $@yield_once @convention(method) (@inout Number) -> @yields @inout Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $*Number):
  debug_value %0 : $*Number, var, name "self", argno 1, implicit, expr op_deref // id: %1
  %2 = begin_access [modify] [static] %0 : $*Number // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*Number, #Number.value // user: %4
  yield %3 : $*Int, resume bb1, unwind bb2        // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*Number                        // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*Number                        // id: %8
  unwind                                          // id: %9
} // end sil function '$s7sample16NumberV5valueSivM'

// Number.init()
sil hidden @$s7sample16NumberVACycfC : $@convention(method) (@thin Number.Type) -> Number {
// %0 "$metatype"
bb0(%0 : $@thin Number.Type):
  %1 = alloc_stack $Number, var, name "self", implicit // users: %5, %6
  %2 = integer_literal $Builtin.Int64, 0          // user: %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %4
  %4 = struct $Number (%3 : $Int)                 // users: %5, %7
  store %4 to %1 : $*Number                       // id: %5
  dealloc_stack %1 : $*Number                     // id: %6
  return %4 : $Number                             // id: %7
} // end sil function '$s7sample16NumberVACycfC'

// default argument 0 of Number.init(value:)
sil hidden @$s7sample16NumberV5valueACSi_tcfcfA_ : $@convention(thin) () -> Int {
bb0:
  %0 = integer_literal $Builtin.Int64, 0          // user: %1
  %1 = struct $Int (%0 : $Builtin.Int64)          // user: %2
  return %1 : $Int                                // id: %2
} // end sil function '$s7sample16NumberV5valueACSi_tcfcfA_'

// Number.init(value:)
sil hidden @$s7sample16NumberV5valueACSi_tcfC : $@convention(method) (Int, @thin Number.Type) -> Number {
// %0 "$implicit_value"                           // user: %2
// %1 "$metatype"
bb0(%0 : $Int, %1 : $@thin Number.Type):
  %2 = struct $Number (%0 : $Int)                 // user: %3
  return %2 : $Number                             // id: %3
} // end sil function '$s7sample16NumberV5valueACSi_tcfC'



// Mappings from '#fileID' to '#filePath':
//   'sample1/sample1.swift' => 'sample1.swift'


